pool:
  vmImage: 'windows-2019'

variables:
  BuildConfiguration: 'Release'
  TestProject: 'TCSlackbot.Tests'

steps:
# Use dotnet30
- task: UseDotNet@2
  inputs:
    version: '3.1.x'

# Restore dependencies
- task: DotNetCoreCLI@2
  inputs:
    command: restore
    projects: '**/*.csproj'
    # feedsToUse: config
    # nugetConfigPath: NuGet.config

# Build projects
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration)'

# Run tests
- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(BuildConfiguration)'

# Publish test results
- script: dotnet test $(TestProject) --logger trx
- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'

# Publish artifacts
- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

# Publish build artifacts
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'tcslackbot'

# Deploy the web app
# - task: DotNetCoreCLI@2
#   inputs:
#     command: publish
#     publishWebProjects: True
#     arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
#     zipAfterPublish: True